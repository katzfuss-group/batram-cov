from typing import NamedTuple, Protocol, TypeVar

import jax
from numpy import ndarray

T = TypeVar("T", jax.Array, ndarray)


class ArraysProtocol[T](Protocol):
    """Protocol for arrays to follow

    Attributes:
    ---
    :param:`locs T (N, d)` Ordered locations of samples on a grid

    :param:`nearest_neighbors T (N, m)` Nearest neighbors for
        building conditioning sets

    :param:`li T (N, )` Distance to nearest neighbor (scaling
        used by spatial priors)

    :param:`maxmin_permutation T (N, )` The permutation from
        unordered locs to ordered locs

    :param:`x T (n, p)` The covariate values corresponding to
        each sample

    :param:`samples T (nreps, n, N)` Climate variables from an
        unknown distribution, set to match the shape of simulation data
    """

    locs: T
    nearest_neighbors: T
    li: T
    maxmin_permutation: T
    x: T
    samples: T


class AppData(NamedTuple):
    """Pre-processed CMIP6 data demonstrating the model.

    Attributes:
    -----------
    locs: ndarray (N, d)
        Ordered locations of samples on a grid

    nearest_neighbors: ndarray (N, m)
        Nearest neighbors for building conditioning sets

    li: ndarray (N, )
        Distance to nearest neighbor (scaling used by spatial priors)

    maxmin_permutation: ndarray (N, )
        The permutation from unordered locs to ordered locs

    x: ndarray (n, p)
        The covariate values corresponding to each sample

    samples: ndarray (nreps, n, N)
        Climate variables from an unknown distribution, set to match the shape
        of simulation data

    description: str
    """

    locs: ndarray
    nearest_neighbors: ndarray
    li: ndarray
    maxmin_permutation: ndarray
    x: ndarray
    samples: ndarray
    description: str


class AnomalizedData(NamedTuple):
    """Anomalized data for a given AppData instance.

    Acts as a superset of the AppData class with `samples` as anomalies instead
    of realized values from the observed distribution. The mean and standard
    deviation fields are provided to reconstruct the original samples as
    needed.

    Attributes:
    -----------
    locs: ndarray (N, d)
        Ordered locations of samples on a grid

    nearest_neighbors: ndarray (N, m)
        Nearest neighbors for building conditioning sets

    li: ndarray (N, )
        Distance to nearest neighbor (scaling used by spatial priors)

    maxmin_permutation: ndarray (N, )
        The permutation from unordered locs to ordered locs

    x: ndarray (n, p)
        The covariate values corresponding to each sample

    samples: ndarray (nreps, n, N)
        Climate variables from an unknown distribution, set to match the shape
        of simulation data

    mean: ndarray (nreps, 1, N)
        The mean field of the samples, averaged over `n` examples

    sd: ndarray(nreps, 1, N)
        The standard deviation field of samples, averaged over `n` examples

    description: str
    """

    locs: ndarray
    nearest_neighbors: ndarray
    li: ndarray
    maxmin_permutation: ndarray
    x: ndarray
    samples: ndarray
    mean: ndarray
    sd: ndarray
    description: str


class SimulationData(NamedTuple):
    """Data for simulations (generated in Numpy, consumed in JAX).

    Attributes:
    -----------
    locs: np.ndarray (N, d)
        Ordered locations of the samples on a grid

    nearest_neighbors: np.ndarray (N, m)
        Nearest neighbors for building conditioning sets

    li: np.ndarray (N, )
        Distance to nearest neighbor (scaling used by spatial priors)

    maxmin_permutation: np.ndarray (N, )
        The permutation from unordered locs to ordered locs

    inv_maxmin_permutation: np.ndarray (N, )
        maxmin_permutation inverse (maxmin_permutation.argsort())

    x: np.ndarray (n, p)
        The covariate values corresponding to each sample

    samples: np.ndarray (nreps, n, N)
        Sample fields generated from a Gaussian process

    means: np.ndarray (nreps, n, N)
        Estimands for the sample fields (mean of the GP w/o sampling error)

    conditional_variances: np.ndarray (N, )
        Conditional variances generated by the data

    noise_var: float
        Nugget used in generation

    seed: int
        Random seed used to generate the dataset

    description: str
        Description of the dataset

    config: dict
        Configuration used to generate the dataset

    timestamp: str
        Timestamp of the dataset generation (yyyy-mm-dd hh:mm:ss)
    """

    locs: ndarray
    nearest_neighbors: ndarray
    li: ndarray
    maxmin_permutation: ndarray
    inv_maxmin_permutation: ndarray
    x: ndarray
    samples: ndarray
    means: ndarray
    conditional_variances: ndarray
    noise_var: float
    seed: int
    description: str
    config: dict
    timestamp: str


class SimulatedDatasets(NamedTuple):
    """A collection of train, test, and validation datasets.

    Datasets parsed from `batram_cov.data_config_parser.parse_experiment_config`
    and a corresponding `config.yml` file.

    Attributes:
    -----------
    train: SimulationData
        Training dataset generated with [ntrain, nreps] samples

    valid: SimulationData
        Validation dataset generated with [nvalid, nreps] samples

    test: SimulationData
        Testing dataset generated with [ntest, nreps] samples
    """

    train: SimulationData
    valid: SimulationData
    test: SimulationData
